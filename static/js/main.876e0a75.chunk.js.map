{"version":3,"sources":["components/general_components/FakeTypedHeader.jsx","components/game_components/Square.jsx","components/game_components/Board.jsx","components/game_components/BoardHelpers.js","components/game_components/AI.js","components/game_components/Game.jsx","components/general_components/Button.jsx","components/settings_components/ButtonGroup.jsx","components/settings_components/Settings.jsx","components/Window.jsx","index.jsx"],"names":["FakeTypedHeader","props","state","words","children","text","currentTime","i","length","newWaitingTime","Math","random","setTimeout","setState","oldState","slice","this","className","React","Component","Square","onClick","clickHandler","isMidVert","symbol","Board","rowIndex","cellIndex","square","squares","handleClick","key","map","row","cell","renderSquare","BoardHelpers","symbols","Object","keys","symbolKey","colIndex","blanks","push","arr","floor","move","newArray","returnString","j","AI","blankSquares","getBlankSquares","randFromArr","getMove","mode","findBestMove","findRandomMove","getEmotion","turn","boardState","evaluateSquares","minimaxEval","evaluateSquaresMinimax","basicEval","maxDepth","Infinity","possibleMoves","bestMoves","bestScore","squaresWithMove","copyWithMove","moveEval","console","log","randBestMove","currentDepth","currentBoardState","currentPlayer","bestEval","boardWithMove","boardWithMoveEval","Game","AiTurnCheck","isFinished","winner","makeAiMove","updateAiEmotion","settings","emotion","isP1sTurn","AiEmotion","prevState","comMove","newSquares","ply1","ply2","Array","fill","Button","classes","color","largeButton","roundedLeft","roundedRight","roundedNone","staticOnHover","join","content","ButtonGroup","buttons","selected","select","htmlFor","id","labelText","index","newButtons","btn","logSelect","val","Settings","options","submitWithOptions","Window","showSettings","showGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.876e0a75.chunk.js","sourcesContent":["import React from \"react\";\n\nclass FakeTypedHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            words: props.children,\n            text: \"\",\n        };\n        let currentTime = 100;\n        for (let i = 0; i < this.state.words.length; i++) {\n            let newWaitingTime = Math.random() * 200;\n            setTimeout(() => {\n                this.setState((oldState) => {\n                    return {\n                        words: oldState.words.slice(1, oldState.words.length),\n                        text: oldState.text + oldState.words.slice(0, 1),\n                    };\n                });\n            }, currentTime + newWaitingTime);\n            currentTime += newWaitingTime;\n        }\n    }\n    render() {\n        return (\n            <h1>\n                >{this.state.text}\n                <span className=\"blinking unselectable\">_</span>\n            </h1>\n        );\n    }\n}\n\nexport default FakeTypedHeader;\n","import React from \"react\";\n\nclass Square extends React.Component {\n    render() {\n        return (\n            <td\n                onClick={this.props.clickHandler}\n                className={\n                    \"cell\" + (this.props.isMidVert ? \" middle-vert\" : \"\")\n                }\n            >\n                {this.props.symbol}\n            </td>\n        );\n    }\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n    renderSquare(rowIndex, cellIndex) {\n        const square = this.props.squares[rowIndex][cellIndex];\n        return (\n            <Square\n                symbol={square}\n                clickHandler={() => {\n                    this.props.handleClick(rowIndex, cellIndex);\n                }}\n                isMidVert={cellIndex === 1}\n                key={cellIndex + \", \" + rowIndex}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <table className=\"board\">\n                <tbody>\n                    {this.props.squares.map((row, rowIndex) => {\n                        return (\n                            <tr\n                                key={rowIndex}\n                                className={rowIndex === 1 ? \"middle-row\" : \"\"}\n                            >\n                                {row.map((cell, cellIndex) => {\n                                    return this.renderSquare(\n                                        rowIndex,\n                                        cellIndex\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Board;\n","class BoardHelpers {\n    /**\n     * Evaluate squares passed in\n     *\n     * @static\n     * @param {Object[]} squares The squares to evaluate\n     * @param {Object} symbols The symbols to check for, eg. {ply1: X,ply2: O}\n     * @returns {string} The winning player, else null\n     * @memberof BoardHelpers\n     */\n    static evaluateSquares(squares, symbols) {\n        for (const symbolKey of Object.keys(symbols)) {\n            const symbol = symbols[symbolKey];\n            // Check horizontals\n            for (let row of squares) {\n                if (\n                    row[0] === symbol &&\n                    row[1] === symbol &&\n                    row[2] === symbol\n                ) {\n                    return symbolKey;\n                }\n            }\n            // Check verticals\n            for (let colIndex = 0; colIndex < squares.length; colIndex++) {\n                if (\n                    squares[0][colIndex] === symbol &&\n                    squares[1][colIndex] === symbol &&\n                    squares[2][colIndex] === symbol\n                ) {\n                    return symbolKey;\n                }\n            }\n            // Check diagonals\n            if (\n                squares[0][0] === symbol &&\n                squares[1][1] === symbol &&\n                squares[2][2] === symbol\n            ) {\n                return symbolKey;\n            }\n            if (\n                squares[0][2] === symbol &&\n                squares[1][1] === symbol &&\n                squares[2][0] === symbol\n            ) {\n                return symbolKey;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Get all the blank squares of the board (squares that are null or have a falsy value)\n     *\n     * @static\n     * @param {string[][]} squares The squares to check\n     * @returns {Object[]} The squares found, in form {row: x, col: y}\n     * @memberof BoardHelpers\n     */\n    static getBlankSquares(squares) {\n        let blanks = [];\n        for (let rowIndex = 0; rowIndex < squares.length; rowIndex++) {\n            for (\n                let cellIndex = 0;\n                cellIndex < squares[rowIndex].length;\n                cellIndex++\n            ) {\n                if (!squares[rowIndex][cellIndex]) {\n                    blanks.push({\n                        row: rowIndex,\n                        cell: cellIndex,\n                    });\n                }\n            }\n        }\n        return blanks;\n    }\n\n    /**\n     * Returns a random element from an array\n     *\n     * @static\n     * @param {Array} arr The array to find an element from\n     * @returns A random element\n     * @memberof BoardHelpers\n     */\n    static randFromArr(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * Deep copies a Two-Dimensional Array of Squares with a move\n     *\n     * @static\n     * @param {string[][]} arr The 2D array of squares\n     * @param {string} symbol The symbol of the move\n     * @param {Object} move The position of the move, in form {row: x, cel: y}\n     * @returns A new 2D array of squares with the move applied\n     * @memberof BoardHelpers\n     */\n    static copyWithMove(arr, symbol, move) {\n        let newArray = [];\n        for (let i = 0; i < arr.length; i++) {\n            newArray.push(arr[i].slice());\n        }\n        if (symbol && move) {\n            newArray[move.row][move.cell] = symbol;\n        }\n        return newArray;\n    }\n\n    /**\n     * Takes the board and converts it to a nice string\n     *\n     * @static\n     * @param {string[][]} squares The board\n     * @returns {string} The board to string\n     * @memberof BoardHelpers\n     */\n    static boardToString(squares) {\n        let horizontalLine = \"-------------\\n\";\n        let returnString = \"\\n    1   2   3\\n  \" + horizontalLine;\n        /*\n         *     1   2   3\n         *   -------------\n         * 1 | - | - | - |\n         *   -------------\n         * 2 | - | - | - |\n         *   -------------\n         * 3 | - | - | - |\n         *   -------------\n         *\n         */\n        for (let i = 0; i < squares.length; i++) {\n            returnString += i + 1 + \" |\";\n            for (let j = 0; j < squares[i].length; j++) {\n                returnString +=\n                    \" \" + (squares[i][j] ? squares[i][j] : \" \") + \" |\";\n            }\n            returnString += \"\\n  \" + horizontalLine;\n        }\n        return returnString;\n    }\n}\n\nexport default BoardHelpers;\n","import BoardHelpers from \"./BoardHelpers\";\nconst MEDIUM_COMPUTER_DEPTH = 2;\n\nclass AI {\n    /**\n     * Returns a move from the AI based on the mode\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The board\n     * @param {\"esy\" | \"med\" | \"imp\"} mode The mode\n     * @param {Object} symbols The symbols, eg. {ply1: X, ply2: O}\n     * @memberof AI\n     */\n    static getMove = (squares, mode, symbols) => {\n        // Make sure there are still blank squares\n        if (!BoardHelpers.getBlankSquares(squares).length) {\n            return null;\n        }\n        // Redirect to move generator based on mode inputted\n        // prettier-ignore\n        let moveFunction =\n            (mode === \"med\") ? (squares, symbols) => { return this.findBestMove(squares, symbols, MEDIUM_COMPUTER_DEPTH) } :\n            (mode === \"imp\") ? this.findBestMove : \n            this.findRandomMove\n        return moveFunction(squares, symbols);\n    };\n\n    /**\n     * Returns an kaomoji based on the computer's evaluation\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The board\n     * @param {\"esy\" | \"med\" | \"imp\"} mode The mode\n     * @param {\"ply1\"|\"ply2\"} turn Who's turn it is\n     * @param {Object} symbols The symbols, eg. {ply1: X, ply2: O}\n     * @memberof AI\n     */\n    static getEmotion = (squares, mode, turn, symbols) => {\n        // Check for terminal state\n        let boardState = BoardHelpers.evaluateSquares(squares, symbols);\n        if (boardState) {\n            if (boardState === \"ply1\") {\n                return \"(╯°□°）╯︵ ┻━┻\";\n            } else {\n                return \"(✿◠‿◠)\";\n            }\n        }\n        // Make sure there are still available squares\n        if (BoardHelpers.getBlankSquares(squares).length === 0) {\n            return \"ᕕ( ᐛ )ᕗ\";\n        }\n        // Give emotion based on com mode and evaluated state\n        if (mode === \"imp\") {\n            let minimaxEval = this.evaluateSquaresMinimax(\n                squares,\n                turn === \"ply1\" ? -1 : 1,\n                symbols\n            );\n            if (minimaxEval === 1) {\n                return \"(ಠ.ಠ)\";\n            } else if (minimaxEval === 0) {\n                return \"(⊙ˍ⊙)\";\n            } else {\n                return \"╰(*°▽°*)╯\";\n            }\n        } else if (mode === \"med\") {\n            let basicEval = this.evaluateSquaresMinimax(\n                squares,\n                turn === \"ply1\" ? -1 : 1,\n                symbols,\n                MEDIUM_COMPUTER_DEPTH\n            );\n            if (basicEval === 1) {\n                return \"(っ °Д °;)っ\";\n            } else if (basicEval === 0) {\n                return \"┌༼ σ ‸ σ ༽┐\";\n            } else {\n                return \"（＾∀＾●）ﾉｼ\";\n            }\n        } else if (mode === \"esy\") {\n            return \"༼ つ ◕_◕ ༽つ\";\n        }\n    };\n\n    static findBestMove = (squares, symbols, maxDepth = Infinity) => {\n        // debugger;\n        let possibleMoves = BoardHelpers.getBlankSquares(squares);\n        let bestMoves = [];\n        let bestScore = -2;\n        for (const move of possibleMoves) {\n            let squaresWithMove = BoardHelpers.copyWithMove(\n                squares,\n                symbols[\"ply2\"],\n                move\n            );\n            let moveEval = -this.evaluateSquaresMinimax(\n                squaresWithMove,\n                -1,\n                symbols,\n                maxDepth\n            );\n            console.log({ moveEval });\n            if (moveEval > bestScore) {\n                bestScore = moveEval;\n                bestMoves = [move];\n            } else if (moveEval === bestScore) {\n                bestMoves.push(move);\n            }\n        }\n        let randBestMove = BoardHelpers.randFromArr(bestMoves);\n        return randBestMove;\n    };\n\n    /**\n     * Evaluate the board and future boards from the board with the minimax algorithm.\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The squares to evaluate.\n     * @param {Number} turn The turn 1 for com, -1 for player\n     * @param {Object} symbols The symbols, eg. [ply1: X, ply2: O]\n     * @param {Number} maxDepth THe maximum depth to analyze to.\n     * @param {Number} currentDepth THe depth currently analyzed to\n     * @returns {Number} 1 for com winning, -1 for player winning, 0 for equal\n     * @memberof AI\n     */\n    static evaluateSquaresMinimax = (\n        squares,\n        turn,\n        symbols,\n        maxDepth = Infinity,\n        currentDepth = 0\n    ) => {\n        if (currentDepth >= maxDepth) {\n            console.log(\"Exceded depth\");\n            return null;\n        }\n        // Check for terminal positions\n        let currentBoardState = BoardHelpers.evaluateSquares(squares, symbols);\n        if (currentBoardState) {\n            return (currentBoardState === \"ply1\" ? -1 : 1) * turn; // NOTE: Adjusted for minimizer\n        }\n        // Check current player\n        let currentPlayer = turn === 1 ? \"ply2\" : \"ply1\";\n        // Get blank squares\n        let possibleMoves = BoardHelpers.getBlankSquares(squares);\n        let bestEval = -2;\n        for (const move of possibleMoves) {\n            let boardWithMove = BoardHelpers.copyWithMove(\n                squares,\n                symbols[currentPlayer],\n                move\n            );\n            let boardWithMoveEval = -this.evaluateSquaresMinimax(\n                boardWithMove,\n                -turn,\n                symbols,\n                maxDepth,\n                currentDepth + 1\n            );\n            if (boardWithMoveEval === null) {\n                continue;\n            }\n            if (boardWithMoveEval > bestEval) {\n                bestEval = boardWithMoveEval;\n            }\n        }\n        if (possibleMoves.length === 0) {\n            return 0;\n        }\n        return bestEval;\n    };\n\n    /**\n     * Returns a random move from the squares\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The squares\n     * @returns A random move in form {ply1: x, ply2: y}\n     * @memberof AI\n     */\n    static findRandomMove(squares) {\n        const blankSquares = BoardHelpers.getBlankSquares(squares);\n        return BoardHelpers.randFromArr(blankSquares);\n    }\n}\n\nexport default AI;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport AI from \"./AI\";\nimport BoardHelpers from \"./BoardHelpers\";\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isP1sTurn: props.settings[\"who-is-moving-first\"] === \"ply1\",\n            symbols: {\n                ply1: props.settings[\"who-is-o\"] === \"ply1\" ? \"O\" : \"X\",\n                ply2: props.settings[\"who-is-o\"] === \"ply1\" ? \"X\" : \"O\",\n            },\n            isFinished: false,\n            squares: Array(3).fill(Array(3).fill(null)),\n            // squares: [\n            //     [\"O\", null, \"X\"],\n            //     [\"X\", null, null],\n            //     [\"X\", \"O\", \"O\"],\n            // ],\n            winner: null,\n            AiEmotion: null,\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>\n                    {this.state.winner === \"Draw\"\n                        ? \"Draw!\"\n                        : this.state.winner\n                        ? `${this.state.winner} wins!`\n                        : \"\"}\n                </h2>\n                <Board\n                    squares={this.state.squares}\n                    handleClick={this.handleClick}\n                />\n                <p>\n                    Current turn:{\" \"}\n                    {this.state.isP1sTurn ? \"Player 1\" : \"Player 2\"} (\n                    {this.state.symbols[this.state.isP1sTurn ? \"ply1\" : \"ply2\"]}\n                    )\n                </p>\n                {this.props.settings[\"player-2-mode\"] !== \"hum\" ? (\n                    <p>AI: {this.state.AiEmotion || \"ㄟ( ▔, ▔ )ㄏ\"}</p>\n                ) : (\n                    \"\"\n                )}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.AiTurnCheck();\n        this.updateAiEmotion();\n    }\n\n    componentDidUpdate() {\n        this.AiTurnCheck();\n        this.updateAiEmotion();\n    }\n\n    AiTurnCheck = () => {\n        // Make sure we're still playing\n        if (!this.state.isFinished) {\n            // Check if either playing is winning\n            let winner = BoardHelpers.evaluateSquares(\n                this.state.squares,\n                this.state.symbols\n            );\n            if (winner) {\n                this.setState({\n                    isFinished: true,\n                    winner: winner,\n                });\n                return;\n            }\n            // Make sure it isn't a draw\n            if (BoardHelpers.getBlankSquares(this.state.squares).length === 0) {\n                this.setState({\n                    isFinished: true,\n                    winner: \"Draw\",\n                });\n                return;\n            }\n            this.makeAiMove();\n        }\n    };\n\n    updateAiEmotion = () => {\n        // Make sure AI is used\n        if (this.props.settings[\"player-2-mode\"] === \"hum\") {\n            return;\n        }\n        let emotion = AI.getEmotion(\n            this.state.squares,\n            this.props.settings[\"player-2-mode\"],\n            this.state.isP1sTurn ? \"ply1\" : \"ply2\",\n            this.state.symbols\n        );\n        if (this.state.AiEmotion === emotion) {\n            return;\n        }\n        this.setState({\n            AiEmotion: emotion,\n        });\n    };\n\n    makeAiMove = () => {\n        if (\n            !this.state.isP1sTurn &&\n            this.props.settings[\"player-2-mode\"] !== \"hum\"\n        ) {\n            this.setState((prevState) => {\n                let comMove = AI.getMove(\n                    this.state.squares,\n                    this.props.settings[\"player-2-mode\"],\n                    this.state.symbols\n                );\n                let newSquares = BoardHelpers.copyWithMove(\n                    this.state.squares,\n                    this.state.symbols[\"ply2\"],\n                    comMove\n                );\n                let newState = {\n                    ...prevState,\n                    squares: newSquares,\n                    isP1sTurn: true,\n                };\n                return newState;\n            });\n        }\n    };\n\n    handleClick = (rowIndex, cellIndex) => {\n        // Make sure we're still going\n        if (this.state.isFinished) {\n            return;\n        }\n        // Make sure square is empty\n        if (this.state.squares[rowIndex][cellIndex]) {\n            return;\n        }\n        // Make sure the com isn't thinking\n        if (\n            !this.state.isP1sTurn &&\n            this.props.settings[\"player-2-mode\"] !== \"hum\"\n        ) {\n            return;\n        }\n        // Human moving\n        let squares = BoardHelpers.copyWithMove(this.state.squares);\n        squares[rowIndex][cellIndex] = this.state.symbols[\n            this.state.isP1sTurn ? \"ply1\" : \"ply2\"\n        ];\n        this.setState({\n            squares: squares,\n            isP1sTurn: !this.state.isP1sTurn,\n        });\n    };\n}\n\nexport default Game;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Button extends React.Component {\n    render() {\n        const classes = [\"button\"];\n        if (this.props.color) {\n            classes.push(\"button-\" + this.props.color);\n        }\n        if (this.props.largeButton) {\n            classes.push(\"button-large\");\n        }\n        if (this.props.roundedLeft) {\n            classes.push(\"button-rounded-left\");\n        }\n        if (this.props.roundedRight) {\n            classes.push(\"button-rounded-right\");\n        }\n        if (this.props.roundedNone) {\n            classes.push(\"button-rounded-none\");\n        }\n        if (this.props.staticOnHover) {\n            classes.push(\"button-static\");\n        }\n        return (\n            <button\n                onClick={this.props.handleClick}\n                className={classes.join(\" \")}\n            >\n                {this.props.content}\n            </button>\n        );\n    }\n}\n\nButton.propTypes = {\n    color: PropTypes.string,\n    content: PropTypes.string,\n    handleClick: PropTypes.func,\n    roundedLeft: PropTypes.bool,\n    roundedRight: PropTypes.bool,\n    roundedNone: PropTypes.bool,\n    staticOnHover: PropTypes.bool,\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"../general_components/Button\";\n\nclass ButtonGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttons: null,\n            selected: 0,\n        };\n        this.select(this.state.selected);\n    }\n\n    render() {\n        return (\n            <div className=\"button-group\">\n                <label htmlFor={this.props.id}>{this.props.labelText}</label>\n                <div className=\"buttons\" id={this.props.id}>\n                    {this.state.buttons || <div>Loading...</div>}\n                </div>\n            </div>\n        );\n    }\n\n    select(index) {\n        const newButtons = this.props.buttons.map((btn, i) => {\n            return (\n                <Button\n                    color={index === i ? \"filled-\" + this.props.color : \"gray\"}\n                    handleClick={() => this.select(i)}\n                    staticOnHover={true}\n                    content={btn.text}\n                    key={i}\n                />\n            );\n        });\n        if (this.state.buttons) {\n            this.setState({\n                buttons: newButtons,\n                selected: index,\n            });\n        } else {\n            // eslint-disable-next-line\n            this.state.buttons = newButtons;\n        }\n        this.props.logSelect(this.props.id, this.props.buttons[index].val);\n    }\n\n    getSelected() {\n        return this.props.buttons[this.state.selected].val;\n    }\n}\n\nButtonGroup.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    color: PropTypes.string,\n    buttons: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default ButtonGroup;\n","/*\ntxt: val\nSETTINGS OPTIONS:\n-----------------\nwho-is-o:\n    Player 1: ply1,\n    Player 2: ply2\n-----------------\nwho-is-moving-first:\n    Player 1: ply1,\n    Player 2: ply2\n-----------------\nplayer-2-mode:\n    Easy Computer: esy\n    Medium Computer: med\n    Impossible Computer: imp\n    Human: hum\n-----------------\n*/\n\nimport React from \"react\";\n\nimport ButtonGroup from \"./ButtonGroup\";\nimport Button from \"../general_components/Button\";\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {},\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"settings\">\n                <h2>Settings</h2>\n                <ButtonGroup\n                    id=\"who-is-o\"\n                    labelText=\"Who is O?\"\n                    color=\"purple\"\n                    buttons={[\n                        { text: \"Player 1\", val: \"ply1\" },\n                        { text: \"Player 2\", val: \"ply2\" },\n                    ]}\n                    logSelect={this.logSelect}\n                />\n                <ButtonGroup\n                    id=\"who-is-moving-first\"\n                    labelText=\"Who is moving first?\"\n                    color=\"purple\"\n                    buttons={[\n                        { text: \"Player 1\", val: \"ply1\" },\n                        { text: \"Player 2\", val: \"ply2\" },\n                    ]}\n                    logSelect={this.logSelect}\n                />\n                <ButtonGroup\n                    id=\"player-2-mode\"\n                    labelText=\"Player 2 is:\"\n                    color=\"purple\"\n                    buttons={[\n                        { text: \"Easy Computer\", val: \"esy\" },\n                        { text: \"Medium Computer\", val: \"med\" },\n                        { text: \"Impossible Computer\", val: \"imp\" },\n                        { text: \"Human\", val: \"hum\" },\n                    ]}\n                    logSelect={this.logSelect}\n                />\n                <Button\n                    color=\"green\"\n                    content=\"Play!\"\n                    handleClick={() => {\n                        this.props.submitWithOptions(this.state.options);\n                    }}\n                    largeButton=\"true\"\n                />\n            </div>\n        );\n    }\n\n    logSelect = (id, val) => {\n        this.setState((oldState) => {\n            let options = { ...oldState.options };\n            options[id] = val;\n            return { options };\n        });\n    };\n}\n\nexport default Settings;\n","import React from \"react\";\nimport FakeTypedHeader from \"./general_components/FakeTypedHeader\";\nimport Game from \"./game_components/Game\";\nimport Settings from \"./settings_components/Settings\";\n\nclass Window extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showSettings: true,\n            showGame: false,\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <FakeTypedHeader>tic tac toe</FakeTypedHeader>\n                <hr className=\"divider\" />\n                {this.state.showSettings && (\n                    <Settings submitWithOptions={this.submitWithOptions} />\n                )}\n                {this.state.showGame && <Game settings={this.state.settings} />}\n            </div>\n        );\n    }\n\n    submitWithOptions = (settings) => {\n        this.setState({\n            showSettings: false,\n            showGame: true,\n            settings: settings,\n        });\n    };\n}\n\nexport default Window;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Window from \"./components/Window\";\n\nimport \"./scss/index.scss\";\n\nReactDOM.render(<Window />, document.getElementById(\"root\"));\n"],"sourceRoot":""}