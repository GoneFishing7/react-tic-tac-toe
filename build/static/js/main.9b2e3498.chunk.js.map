{"version":3,"sources":["components/general_components/FakeTypedHeader.jsx","components/game_components/Square.jsx","components/game_components/Board.jsx","components/game_components/BoardHelpers.js","components/game_components/AI.js","components/game_components/Game.jsx","components/general_components/Button.jsx","components/settings_components/ButtonGroup.jsx","components/settings_components/Settings.jsx","components/Window.jsx","index.jsx"],"names":["FakeTypedHeader","props","state","words","children","text","currentTime","i","length","newWaitingTime","Math","random","setTimeout","setState","oldState","slice","this","className","React","Component","Square","onClick","clickHandler","isMidVert","symbol","Board","rowIndex","cellIndex","square","squares","handleClick","key","map","row","cell","renderSquare","BoardHelpers","symbols","Object","keys","symbolKey","colIndex","blanks","push","arr","floor","move","newArray","returnString","j","AI","possibleMoves","getBlankSquares","winningMoves","neutralMoves","losingMoves","comMoveLoop","squaresWithNewMove","copyWithMove","evaluateSquares","possibleReplies","reply","squaresWithReply","console","log","randFromArr","blankSquares","getMove","mode","findBasicMove","findBestMove","findRandomMove","getEmotion","boardState","bestMoves","bestScore","squaresWithMove","moveEval","evaluateSquaresMinimax","randBestMove","turn","currentBoardState","currentPlayer","bestEval","boardWithMove","boardWithMoveEval","Game","AiTurnCheck","isFinished","winner","makeAiMove","updateAiEmotion","settings","emotion","AiEmotion","isP1sTurn","prevState","comMove","newSquares","ply1","ply2","Array","fill","Button","classes","color","largeButton","roundedLeft","roundedRight","roundedNone","staticOnHover","join","content","ButtonGroup","buttons","selected","select","htmlFor","id","labelText","index","newButtons","btn","logSelect","val","Settings","options","submitWithOptions","Window","showSettings","showGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b2e3498.chunk.js","sourcesContent":["import React from \"react\";\n\nclass FakeTypedHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            words: props.children,\n            text: \"\",\n        };\n        let currentTime = 100;\n        for (let i = 0; i < this.state.words.length; i++) {\n            let newWaitingTime = Math.random() * 200;\n            setTimeout(() => {\n                this.setState((oldState) => {\n                    return {\n                        words: oldState.words.slice(1, oldState.words.length),\n                        text: oldState.text + oldState.words.slice(0, 1),\n                    };\n                });\n            }, currentTime + newWaitingTime);\n            currentTime += newWaitingTime;\n        }\n    }\n    render() {\n        return (\n            <h1>\n                >{this.state.text}\n                <span className=\"blinking unselectable\">_</span>\n            </h1>\n        );\n    }\n}\n\nexport default FakeTypedHeader;\n","import React from \"react\";\n\nclass Square extends React.Component {\n    render() {\n        return (\n            <td\n                onClick={this.props.clickHandler}\n                className={\n                    \"cell\" + (this.props.isMidVert ? \" middle-vert\" : \"\")\n                }\n            >\n                {this.props.symbol}\n            </td>\n        );\n    }\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n    renderSquare(rowIndex, cellIndex) {\n        const square = this.props.squares[rowIndex][cellIndex];\n        return (\n            <Square\n                symbol={square}\n                clickHandler={() => {\n                    this.props.handleClick(rowIndex, cellIndex);\n                }}\n                isMidVert={cellIndex === 1}\n                key={cellIndex + \", \" + rowIndex}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <table className=\"board\">\n                <tbody>\n                    {this.props.squares.map((row, rowIndex) => {\n                        return (\n                            <tr\n                                key={rowIndex}\n                                className={rowIndex === 1 ? \"middle-row\" : \"\"}\n                            >\n                                {row.map((cell, cellIndex) => {\n                                    return this.renderSquare(\n                                        rowIndex,\n                                        cellIndex\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Board;\n","class BoardHelpers {\n    /**\n     * Evaluate squares passed in\n     *\n     * @static\n     * @param {Object[]} squares The squares to evaluate\n     * @param {Object} symbols The symbols to check for, eg. {ply1: X,ply2: O}\n     * @returns {string} The winning player, else null\n     * @memberof BoardHelpers\n     */\n    static evaluateSquares(squares, symbols) {\n        for (const symbolKey of Object.keys(symbols)) {\n            const symbol = symbols[symbolKey];\n            // Check horizontals\n            for (let row of squares) {\n                if (\n                    row[0] === symbol &&\n                    row[1] === symbol &&\n                    row[2] === symbol\n                ) {\n                    return symbolKey;\n                }\n            }\n            // Check verticals\n            for (let colIndex = 0; colIndex < squares.length; colIndex++) {\n                if (\n                    squares[0][colIndex] === symbol &&\n                    squares[1][colIndex] === symbol &&\n                    squares[2][colIndex] === symbol\n                ) {\n                    return symbolKey;\n                }\n            }\n            // Check diagonals\n            if (\n                squares[0][0] === symbol &&\n                squares[1][1] === symbol &&\n                squares[2][2] === symbol\n            ) {\n                return symbolKey;\n            }\n            if (\n                squares[0][2] === symbol &&\n                squares[1][1] === symbol &&\n                squares[2][0] === symbol\n            ) {\n                return symbolKey;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Get all the blank squares of the board (squares that are null or have a falsy value)\n     *\n     * @static\n     * @param {string[][]} squares The squares to check\n     * @returns {Object[]} The squares found, in form {row: x, col: y}\n     * @memberof BoardHelpers\n     */\n    static getBlankSquares(squares) {\n        let blanks = [];\n        for (let rowIndex = 0; rowIndex < squares.length; rowIndex++) {\n            for (\n                let cellIndex = 0;\n                cellIndex < squares[rowIndex].length;\n                cellIndex++\n            ) {\n                if (!squares[rowIndex][cellIndex]) {\n                    blanks.push({\n                        row: rowIndex,\n                        cell: cellIndex,\n                    });\n                }\n            }\n        }\n        return blanks;\n    }\n\n    /**\n     * Returns a random element from an array\n     *\n     * @static\n     * @param {Array} arr The array to find an element from\n     * @returns A random element\n     * @memberof BoardHelpers\n     */\n    static randFromArr(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * Deep copies a Two-Dimensional Array of Squares with a move\n     *\n     * @static\n     * @param {string[][]} arr The 2D array of squares\n     * @param {string} symbol The symbol of the move\n     * @param {Object} move The position of the move, in form {row: x, cel: y}\n     * @returns A new 2D array of squares with the move applied\n     * @memberof BoardHelpers\n     */\n    static copyWithMove(arr, symbol, move) {\n        let newArray = [];\n        for (let i = 0; i < arr.length; i++) {\n            newArray.push(arr[i].slice());\n        }\n        if (symbol && move) {\n            newArray[move.row][move.cell] = symbol;\n        }\n        return newArray;\n    }\n\n    /**\n     * Takes the board and converts it to a nice string\n     *\n     * @static\n     * @param {string[][]} squares The board\n     * @returns {string} The board to string\n     * @memberof BoardHelpers\n     */\n    static boardToString(squares) {\n        let horizontalLine = \"-------------\\n\";\n        let returnString = \"\\n    1   2   3\\n  \" + horizontalLine;\n        /*\n         *     1   2   3\n         *   -------------\n         * 1 | - | - | - |\n         *   -------------\n         * 2 | - | - | - |\n         *   -------------\n         * 3 | - | - | - |\n         *   -------------\n         *\n         */\n        for (let i = 0; i < squares.length; i++) {\n            returnString += i + 1 + \" |\";\n            for (let j = 0; j < squares[i].length; j++) {\n                returnString +=\n                    \" \" + (squares[i][j] ? squares[i][j] : \" \") + \" |\";\n            }\n            returnString += \"\\n  \" + horizontalLine;\n        }\n        return returnString;\n    }\n}\n\nexport default BoardHelpers;\n","import BoardHelpers from \"./BoardHelpers\";\n\nclass AI {\n    /**\n     * Returns a move from the AI based on the mode\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The board\n     * @param {\"esy\" | \"med\" | \"imp\"} mode The mode\n     * @param {Object} symbols The symbols, eg. {ply1: X, ply2: O}\n     * @memberof AI\n     */\n    static getMove = (squares, mode, symbols) => {\n        // Make sure there are still blank squares\n        if (!BoardHelpers.getBlankSquares(squares).length) {\n            return null;\n        }\n        // Redirect to move generator based on mode inputted\n        // prettier-ignore\n        let moveFunction =\n            (mode === \"med\") ? this.findBasicMove :\n            (mode === \"imp\") ? this.findBestMove : \n            this.findRandomMove\n        return moveFunction(squares, symbols);\n    };\n\n    /**\n     * Returns an kaomoji based on the computer's evaluation\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The board\n     * @param {\"esy\" | \"med\" | \"imp\"} mode The mode\n     * @param {Object} symbols The symbols, eg. {ply1: X, ply2: O}\n     * @memberof AI\n     */\n    static getEmotion = (squares, mode, symbols) => {\n        // Check for terminal state\n        console.log({ squares, symbols });\n        let boardState = BoardHelpers.evaluateSquares(squares, symbols);\n        if (boardState) {\n            if (boardState === \"ply1\") {\n                return \"(╯°□°）╯︵ ┻━┻\";\n            } else {\n                return \"(✿◠‿◠)\";\n            }\n        }\n    };\n\n    static findBestMove = (squares, symbols) => {\n        let possibleMoves = BoardHelpers.getBlankSquares(squares);\n        let bestMoves = [];\n        let bestScore = -2;\n        for (const move of possibleMoves) {\n            let squaresWithMove = BoardHelpers.copyWithMove(\n                squares,\n                symbols[\"ply2\"],\n                move\n            );\n            console.log({ squaresWithMove });\n            let moveEval = AI.evaluateSquaresMinimax(\n                squaresWithMove,\n                -1,\n                symbols\n            );\n            if (moveEval > bestScore) {\n                bestScore = moveEval;\n                bestMoves = [move];\n            } else if (moveEval === bestScore) {\n                bestMoves.push(move);\n            }\n        }\n        let randBestMove = BoardHelpers.randFromArr(bestMoves);\n        console.log(\n            `Minimax eval: ${AI.evaluateSquaresMinimax(\n                BoardHelpers.copyWithMove(\n                    squares,\n                    symbols[\"ply2\"],\n                    randBestMove\n                ),\n                -1,\n                symbols\n            )}`\n        );\n        return randBestMove;\n    };\n\n    /**\n     * Evaluate the board and future boards from the board with the minimax algorithm.\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The squares to evaluate.\n     * @param {Number} turn The turn 1 for com, -1 for player\n     * @param {Object} symbols The symbols, eg. [ply1: X, ply2: O]\n     * @returns {Number} 1 for com winning, -1 for player winning, 0 for equal\n     * @memberof AI\n     */\n    static evaluateSquaresMinimax = (squares, turn, symbols) => {\n        // Check for terminal positions\n        let currentBoardState = BoardHelpers.evaluateSquares(squares, symbols);\n        if (currentBoardState) {\n            return (currentBoardState === \"ply1\" ? -1 : 1) * turn;\n        }\n        // Check current player\n        let currentPlayer = turn === 1 ? \"ply2\" : \"ply1\";\n        // Get blank squares\n        let possibleMoves = BoardHelpers.getBlankSquares(squares);\n        let bestEval = -2;\n        for (const move of possibleMoves) {\n            let boardWithMove = BoardHelpers.copyWithMove(\n                squares,\n                symbols[currentPlayer],\n                move\n            );\n            let boardWithMoveEval = this.evaluateSquaresMinimax(\n                boardWithMove,\n                -turn,\n                symbols\n            );\n            // prettier-ignore\n            bestEval = \n                (!bestEval) ? boardWithMoveEval : \n                (boardWithMoveEval > bestEval) ? boardWithMoveEval :\n                bestEval;\n        }\n        if (bestEval === -2 || possibleMoves.length === 0) {\n            return 0;\n        }\n        return bestEval;\n    };\n\n    /**\n     * Find a basic move. Only looks at immediate replies/moves\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The squares to search\n     * @param {string[]} symbols The symbols, eg. [ply1: X, ply2: O]\n     * @returns {Object} Returns move in form {row: x, col: y}\n     * @memberof AI\n     */\n    static findBasicMove(squares, symbols) {\n        let possibleMoves = BoardHelpers.getBlankSquares(squares);\n        let winningMoves = [];\n        let neutralMoves = [];\n        let losingMoves = [];\n        comMoveLoop: for (const move of possibleMoves) {\n            let squaresWithNewMove = BoardHelpers.copyWithMove(\n                squares,\n                symbols[\"ply2\"],\n                move\n            );\n            let boardStateAfterComMove = BoardHelpers.evaluateSquares(\n                squaresWithNewMove,\n                symbols\n            );\n            if (boardStateAfterComMove === \"ply2\") {\n                winningMoves.push(move);\n            } else {\n                let possibleReplies = BoardHelpers.getBlankSquares(\n                    squaresWithNewMove\n                );\n                for (const reply of possibleReplies) {\n                    let squaresWithReply = BoardHelpers.copyWithMove(\n                        squaresWithNewMove,\n                        symbols[\"ply1\"],\n                        reply\n                    );\n                    let boardStateAfterReply = BoardHelpers.evaluateSquares(\n                        squaresWithReply,\n                        symbols\n                    );\n                    if (boardStateAfterReply === \"ply1\") {\n                        losingMoves.push(move);\n                        continue comMoveLoop;\n                    }\n                }\n                neutralMoves.push(move);\n            }\n        }\n        console.log({ winningMoves, neutralMoves, losingMoves });\n        if (winningMoves.length) {\n            return BoardHelpers.randFromArr(winningMoves);\n        } else if (neutralMoves.length) {\n            return BoardHelpers.randFromArr(neutralMoves);\n        } else {\n            return BoardHelpers.randFromArr(losingMoves);\n        }\n    }\n\n    /**\n     * Returns a random move from the squares\n     *\n     * @method\n     * @static\n     * @param {string[][]} squares The squares\n     * @returns A random move in form {ply1: x, ply2: y}\n     * @memberof AI\n     */\n    static findRandomMove(squares) {\n        const blankSquares = BoardHelpers.getBlankSquares(squares);\n        return BoardHelpers.randFromArr(blankSquares);\n    }\n}\n\nexport default AI;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport AI from \"./AI\";\nimport BoardHelpers from \"./BoardHelpers\";\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isP1sTurn: props.settings[\"who-is-moving-first\"] === \"ply1\",\n            symbols: {\n                ply1: props.settings[\"who-is-o\"] === \"ply1\" ? \"O\" : \"X\",\n                ply2: props.settings[\"who-is-o\"] === \"ply1\" ? \"X\" : \"O\",\n            },\n            isFinished: false,\n            squares: Array(3).fill(Array(3).fill(null)),\n            // squares: [\n            //     [\"O\", null, \"X\"],\n            //     [\"X\", null, null],\n            //     [\"X\", \"O\", \"O\"],\n            // ],\n            winner: null,\n            AiEmotion: null,\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>\n                    {this.state.winner === \"Draw\"\n                        ? \"Draw!\"\n                        : this.state.winner\n                        ? `${this.state.winner} wins!`\n                        : \"\"}\n                </h2>\n                <Board\n                    squares={this.state.squares}\n                    handleClick={this.handleClick}\n                />\n                <p>\n                    Current turn:{\" \"}\n                    {this.state.isP1sTurn ? \"Player 1\" : \"Player 2\"} (\n                    {this.state.symbols[this.state.isP1sTurn ? \"ply1\" : \"ply2\"]}\n                    )\n                </p>\n                {this.props.settings[\"player-2-mode\"] !== \"hum\" ? (\n                    <p>AI: {this.state.AiEmotion || \"ㄟ( ▔, ▔ )ㄏ\"}</p>\n                ) : (\n                    \"\"\n                )}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.AiTurnCheck();\n        this.updateAiEmotion();\n    }\n\n    componentDidUpdate() {\n        this.AiTurnCheck();\n        this.updateAiEmotion();\n    }\n\n    AiTurnCheck = () => {\n        // Make sure we're still playing\n        if (!this.state.isFinished) {\n            // Check if either playing is winning\n            let winner = BoardHelpers.evaluateSquares(\n                this.state.squares,\n                this.state.symbols\n            );\n            if (winner) {\n                this.setState({\n                    isFinished: true,\n                    winner: winner,\n                });\n                return;\n            }\n            // Make sure it isn't a draw\n            if (BoardHelpers.getBlankSquares(this.state.squares).length === 0) {\n                this.setState({\n                    isFinished: true,\n                    winner: \"Draw\",\n                });\n                return;\n            }\n            this.makeAiMove();\n        }\n    };\n\n    updateAiEmotion = () => {\n        // Make sure AI is used\n        if (this.props.settings[\"player-2-mode\"] === \"hum\") {\n            return;\n        }\n        let emotion = AI.getEmotion(\n            this.state.squares,\n            this.props.settings[\"player-2-mode\"],\n            this.state.symbols\n        );\n        if (this.state.AiEmotion === emotion) {\n            return;\n        }\n        this.setState({\n            AiEmotion: emotion,\n        });\n    };\n\n    makeAiMove = () => {\n        if (\n            !this.state.isP1sTurn &&\n            this.props.settings[\"player-2-mode\"] !== \"hum\"\n        ) {\n            this.setState((prevState) => {\n                let comMove = AI.getMove(\n                    this.state.squares,\n                    this.props.settings[\"player-2-mode\"],\n                    this.state.symbols\n                );\n                let newSquares = BoardHelpers.copyWithMove(\n                    this.state.squares,\n                    this.state.symbols[\"ply2\"],\n                    comMove\n                );\n                let newState = {\n                    ...prevState,\n                    squares: newSquares,\n                    isP1sTurn: true,\n                };\n                return newState;\n            });\n        }\n    };\n\n    handleClick = (rowIndex, cellIndex) => {\n        // Make sure we're still going\n        if (this.state.isFinished) {\n            return;\n        }\n        // Make sure square is empty\n        if (this.state.squares[rowIndex][cellIndex]) {\n            return;\n        }\n        // Make sure the com isn't thinking\n        if (\n            !this.state.isP1sTurn &&\n            this.props.settings[\"player-2-mode\"] !== \"hum\"\n        ) {\n            return;\n        }\n        // Human moving\n        let squares = BoardHelpers.copyWithMove(this.state.squares);\n        squares[rowIndex][cellIndex] = this.state.symbols[\n            this.state.isP1sTurn ? \"ply1\" : \"ply2\"\n        ];\n        this.setState({\n            squares: squares,\n            isP1sTurn: !this.state.isP1sTurn,\n        });\n    };\n}\n\nexport default Game;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Button extends React.Component {\n    render() {\n        const classes = [\"button\"];\n        if (this.props.color) {\n            classes.push(\"button-\" + this.props.color);\n        }\n        if (this.props.largeButton) {\n            classes.push(\"button-large\");\n        }\n        if (this.props.roundedLeft) {\n            classes.push(\"button-rounded-left\");\n        }\n        if (this.props.roundedRight) {\n            classes.push(\"button-rounded-right\");\n        }\n        if (this.props.roundedNone) {\n            classes.push(\"button-rounded-none\");\n        }\n        if (this.props.staticOnHover) {\n            classes.push(\"button-static\");\n        }\n        return (\n            <button\n                onClick={this.props.handleClick}\n                className={classes.join(\" \")}\n            >\n                {this.props.content}\n            </button>\n        );\n    }\n}\n\nButton.propTypes = {\n    color: PropTypes.string,\n    content: PropTypes.string,\n    handleClick: PropTypes.func,\n    roundedLeft: PropTypes.bool,\n    roundedRight: PropTypes.bool,\n    roundedNone: PropTypes.bool,\n    staticOnHover: PropTypes.bool,\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"../general_components/Button\";\n\nclass ButtonGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttons: null,\n            selected: 0,\n        };\n        this.select(this.state.selected);\n    }\n\n    render() {\n        return (\n            <div className=\"button-group\">\n                <label htmlFor={this.props.id}>{this.props.labelText}</label>\n                <div className=\"buttons\" id={this.props.id}>\n                    {this.state.buttons || <div>Loading...</div>}\n                </div>\n            </div>\n        );\n    }\n\n    select(index) {\n        const newButtons = this.props.buttons.map((btn, i) => {\n            return (\n                <Button\n                    color={index === i ? \"filled-\" + this.props.color : \"gray\"}\n                    handleClick={() => this.select(i)}\n                    staticOnHover={true}\n                    content={btn.text}\n                    key={i}\n                />\n            );\n        });\n        if (this.state.buttons) {\n            this.setState({\n                buttons: newButtons,\n                selected: index,\n            });\n        } else {\n            // eslint-disable-next-line\n            this.state.buttons = newButtons;\n        }\n        this.props.logSelect(this.props.id, this.props.buttons[index].val);\n    }\n\n    getSelected() {\n        return this.props.buttons[this.state.selected].val;\n    }\n}\n\nButtonGroup.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    color: PropTypes.string,\n    buttons: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default ButtonGroup;\n","/*\ntxt: val\nSETTINGS OPTIONS:\n-----------------\nwho-is-o:\n    Player 1: ply1,\n    Player 2: ply2\n-----------------\nwho-is-moving-first:\n    Player 1: ply1,\n    Player 2: ply2\n-----------------\nplayer-2-mode:\n    Easy Computer: esy\n    Medium Computer: med\n    Impossible Computer: imp\n    Human: hum\n-----------------\n*/\n\nimport React from \"react\";\n\nimport ButtonGroup from \"./ButtonGroup\";\nimport Button from \"../general_components/Button\";\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {},\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"settings\">\n                <h2>Settings</h2>\n                <ButtonGroup\n                    id=\"who-is-o\"\n                    labelText=\"Who is O?\"\n                    color=\"purple\"\n                    buttons={[\n                        { text: \"Player 1\", val: \"ply1\" },\n                        { text: \"Player 2\", val: \"ply2\" },\n                    ]}\n                    logSelect={this.logSelect}\n                />\n                <ButtonGroup\n                    id=\"who-is-moving-first\"\n                    labelText=\"Who is moving first?\"\n                    color=\"purple\"\n                    buttons={[\n                        { text: \"Player 1\", val: \"ply1\" },\n                        { text: \"Player 2\", val: \"ply2\" },\n                    ]}\n                    logSelect={this.logSelect}\n                />\n                <ButtonGroup\n                    id=\"player-2-mode\"\n                    labelText=\"Player 2 is:\"\n                    color=\"purple\"\n                    buttons={[\n                        { text: \"Easy Computer\", val: \"esy\" },\n                        { text: \"Medium Computer\", val: \"med\" },\n                        { text: \"Impossible Computer\", val: \"imp\" },\n                        { text: \"Human\", val: \"hum\" },\n                    ]}\n                    logSelect={this.logSelect}\n                />\n                <Button\n                    color=\"green\"\n                    content=\"Play!\"\n                    handleClick={() => {\n                        this.props.submitWithOptions(this.state.options);\n                    }}\n                    largeButton=\"true\"\n                />\n            </div>\n        );\n    }\n\n    logSelect = (id, val) => {\n        this.setState((oldState) => {\n            let options = { ...oldState.options };\n            options[id] = val;\n            return { options };\n        });\n    };\n}\n\nexport default Settings;\n","import React from \"react\";\nimport FakeTypedHeader from \"./general_components/FakeTypedHeader\";\nimport Game from \"./game_components/Game\";\nimport Settings from \"./settings_components/Settings\";\n\nclass Window extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showSettings: true,\n            showGame: false,\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <FakeTypedHeader>tic tac toe</FakeTypedHeader>\n                <hr className=\"divider\" />\n                {this.state.showSettings && (\n                    <Settings submitWithOptions={this.submitWithOptions} />\n                )}\n                {this.state.showGame && <Game settings={this.state.settings} />}\n            </div>\n        );\n    }\n\n    submitWithOptions = (settings) => {\n        this.setState({\n            showSettings: false,\n            showGame: true,\n            settings: settings,\n        });\n    };\n}\n\nexport default Window;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Window from \"./components/Window\";\n\nimport \"./scss/index.scss\";\n\nReactDOM.render(<Window />, document.getElementById(\"root\"));\n"],"sourceRoot":""}